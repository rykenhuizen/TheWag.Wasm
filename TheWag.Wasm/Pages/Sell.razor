@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using System.Net;
@using TheWag.Models;
@using TheWag.Wasm.Util;
@using TheWag.Wasm.Services;

@inject ProductService productService
@inject AppSettings appSettings

@page "/sell"


@if (_sellStage == SellStage.rdyToUpload)
{
	<h3>Sell you dog pictures!</h3>
	<div>
		<InputFile OnChange="OnInputFileChange" single />
	</div>
}

@if (_sellStage == SellStage.rdyToSell)
{
	<div style="margin-bottom: 3rem">
		<h3>Upload complete, this is a picture of a dog!</h3>
		<img src="@vmPic.URL" />
		<p><b>Description:</b> @vmPic.Description</p>
		<p><b>Tags:</b> @string.Join(", ", vmPic.Tags.Select(x => x))</p>
	</div>

	<EditForm Model="sellModel" OnSubmit="SaveToDB" FormName="SellDogPic">
		<h3>Now let's sell this puppy!</h3>
		<p>How much is this puppy worth: <input @bind-value="sellModel!.Price" /></p>
		<p>How many of these puppies do you have to sell:<input @bind-value="sellModel!.Stock" /></p>
		<button type="submit" class="btn btn-primary"> $ Sell $ </button>
	</EditForm>
}

@if (_sellStage == SellStage.addedToCatalog)
{
	<div>
		<h3>Added to <NavLink href="catalog">catalog!</NavLink></h3>
	</div>
}

@if (_sellStage == SellStage.notADog)
{
	<div>
		<h3>Sorry, we only sell dog pictures.</h3>
		<p>Description: @vmPic.Description</p>
		<img src="@vmPic.URL" />
	</div>
}

@if (_loading)
{
	<img src="images/TailLoader.gif" style="max-height:4em; max-width:4em" />
	<em>Loading...</em>
}

@code {
	private SellStage _sellStage = SellStage.rdyToUpload;
	private bool _loading = false;

	private vmSellUploadPic vmPic = new vmSellUploadPic();
	private static readonly HashSet<string> _imageExtension = new HashSet<string>([".jpg", ".jpeg", ".png", ".gif", ".webp"], StringComparer.OrdinalIgnoreCase);

	[SupplyParameterFromForm]
	private SellFormModel sellModel { get; set; } = new SellFormModel();

	private async void OnInputFileChange(InputFileChangeEventArgs e)
	{
		_loading = true;
		StateHasChanged();

		//add a guid to the file name to avoid collisions
		var guidName = Guid.NewGuid().ToString() + e.File.Name;

		var analysisResult = await productService.AnalyzeImage(e.File, guidName);
		vmPic.Description = analysisResult.Description;
		vmPic.Tags = analysisResult.Tags;
		vmPic.IsDog = analysisResult.IsDog;
		vmPic.FileName = guidName;
		vmPic.URL = $"{appSettings.BlobHostUrl}/{appSettings.TempContainerName}/{vmPic.FileName}";
		
		_sellStage = vmPic.IsDog ? SellStage.rdyToSell : SellStage.notADog;
		_loading = false;
		StateHasChanged();

	}

	private async void SaveToDB()
	{
		_loading = true;
		StateHasChanged();

		await productService.SaveProductAsync(vmPic.Description, sellModel.Price.GetValueOrDefault(), sellModel.Stock.GetValueOrDefault(), vmPic.FileName, vmPic.Tags);

		_sellStage = SellStage.addedToCatalog;
		_loading = false;
		StateHasChanged();
	}

	private enum SellStage { rdyToUpload, rdyToSell, addedToCatalog, notADog, };

	private class vmSellUploadPic
	{
		internal string Description { get; set; } = "No image uploaded";
		internal IList<string> Tags { get; set; } = new List<string>();
		internal bool IsDog { get; set; } = false;
		internal string URL { get; set; } = "";
		internal string FileName { get; set; } = "";
	}

	private class SellFormModel
	{
		internal decimal? Price { get; set; }
		internal int? Stock { get; set; }
		internal string? VendorEmail { get; set; } = "Vendor Email";
		internal string? VendorName { get; set; } = "Vendor Name";
	}
	

}
