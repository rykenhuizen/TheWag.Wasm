@using TheWag.Models;
@using TheWag.Wasm.Util;
@using TheWag.Wasm.Services;

@inject CartService cartService
@inject ProductService productService
@inject AppSettings appSettings

@page "/catalog"

<PageTitle>Catalog</PageTitle>

<h3>Catalog</h3>

@if (_vmProducts == null)
{
    <img src="images/TailLoader.gif" style="max-height:4em; max-width:4em" />
    <em>Loading...</em>
}
else
{
    <div class="container">
        <div class="row row-cols-auto">
            @foreach (var vmProduct in _vmProducts)
            {

                <div class="col">
                    <div class="card container-sm h-100">
                        <img src="@($"{appSettings.BlobHostUrl}/{appSettings.ValidContainerName}/{vmProduct.FileName}")" class="card-img-top force-fit" alt="@vmProduct.Description">
                        <div class="card-body d-flex flex-column">

                            @if (vmProduct.Description == "")
                            {
                                <img src="images/TailLoader.gif" style="max-height:4em; max-width:4em" />
                                <em>Loading...</em>
                            }else{
                                <h5 class="card-title, text-wrap">@vmProduct.Description</h5>
                                <p class="card-text">Price: @string.Format("{0:C}", vmProduct.Price)</p>
                                <div class="mt-auto">
                                    <button type="button" @onclick="(() => AddToCart(vmProduct))" class="btn btn-primary position-relative ">
                                        @vmProduct.AddBtnText
                                        <span class="@vmProduct.HideBadge position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                            @vmProduct.Quantity In cart
                                            <span class="visually-hidden">Already in cart</span>
                                        </span>
                                    </button>
                                </div>
                            }

                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private IList<vmProduct>? _vmProducts = null;

    protected override async Task OnInitializedAsync()
    {
        //the db can be slow to boot up
		//I start to connect to the db, then load pics while waiting
        var productInfo = productService.GetAllProducts();
        

        var vmProducts = new List<vmProduct>();
        
        var blobs = await productService.GetBlobList();
        foreach (var blobName in blobs)
        {
            var product = new vmProduct()
				{
                    FileName = blobName,
				};
            vmProducts.Add(product);
        }
        _vmProducts = vmProducts;
        StateHasChanged();

        LoadProductInfoAsync(productInfo);
    }

    private async void LoadProductInfoAsync(Task<ProductDTO[]> products)
    {
        var toRemove = new List<vmProduct>();
        var productInfo = await products;
        foreach (var vm in _vmProducts)
        {
            var product = productInfo.FirstOrDefault(x => x.URL.Trim() == vm.FileName.Trim() );
            if (product == null)
            {
                toRemove.Add(vm);
            }else{
                vm.Description = product.Description;
                vm.Price = product.Price;
				vm.Id = product.Id ?? 0;
				vm.Stock = product.Stock;

                var cartitem = cartService.Cart.Items.FirstOrDefault(x => x.Product.Id == product.Id);
                if (cartitem != null)
                {
                    vm.AddBtnText = "Add another";
                    vm.HideBadge = "";
                    vm.Quantity = cartitem.Quantity;
                }
            }  
        }

        //remove pics not for sale
        foreach(var vm in toRemove){
            _vmProducts.Remove(vm);
        }

        StateHasChanged();
    }

    private void AddToCart(vmProduct vm)
    {
        //update viewmodel
        vm.Quantity++;
        vm.HideBadge = "";


        //update the cart
        var product = new ProductDTO()
			{
				Description = vm.Description,
				Price = vm.Price,
				URL = vm.FileName,
				Id = vm.Id,
				Stock = vm.Stock,
			};
        cartService.IncrementItem(product);
        StateHasChanged();
    }

    private class vmProduct
    {
        internal int Id { get; set; } = 0;
        internal string Description { get; set; } = "";
        internal string FileName { get; set; } = "";
        internal int Quantity { get; set; } = 0;
        internal decimal Price { get; set; } = 0;
        internal int Stock { get; set; } = 0;
        internal string HideBadge { get; set; } = "visually-hidden";
        internal string AddBtnText { get; set; } = "Add to cart";
    }
}
