@using TheWag.Models;
@using TheWag.Wasm.Util;
@using TheWag.Wasm.Services;

@inject CartService cartService
@inject ProductService productService
@inject AppSettings appSettings

@page "/catalog"

<PageTitle>Catalog</PageTitle>

<h3>Catalog</h3>

@if (_vmProducts == null)
{
    <img src="images/TailLoader.gif" style="max-height:4em; max-width:4em" />
    <em>Loading...</em>
}
else
{
    <div class="container">
        <div class="row row-cols-auto">
            @foreach (var vmProduct in _vmProducts)
            {

                <div class="col">
                    <div class="card container-sm h-100">
                        <img src="@($"{appSettings.BlobHostUrl}/{appSettings.ContainerName}/{vmProduct.Product.URL}")" class="card-img-top force-fit" alt="@vmProduct.Product.Description">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title, text-wrap">@vmProduct.Product.Description</h5>
                            <p class="card-text">Price: @vmProduct.Product.PriceCurrency</p>
                            <div class="mt-auto">
                                <button type="button" @onclick="(() => AddToCart(vmProduct))" class="btn btn-primary position-relative ">
                                    @vmProduct.AddBtnText
                                    <span class="@vmProduct.HideBadge position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                        @vmProduct.Quantity In cart
                                        <span class="visually-hidden">Already in cart</span>
                                    </span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private IList<vmProduct>? _vmProducts = null;

    protected override async Task OnInitializedAsync()
    {
        var vmProducts = new List<vmProduct>();
        foreach (var product in await productService.GetAllProducts())
        {
            // //if the pic doesn't exist in storage, dont load
            // if (bcc.GetBlobClient(product.URL.Trim()).Exists())
            // {
            var vm = new vmProduct(){
                    Product = product
            };

            var cartitem = cartService.Cart.Items.FirstOrDefault(x => x.Product.Id == product.Id);
            if (cartitem != null)
            {
                vm.AddBtnText = "Add another";
                vm.HideBadge = "";
                vm.Quantity = cartitem.Quantity;
            }

            vmProducts.Add(vm);
            // }
        }

        _vmProducts = vmProducts;
        StateHasChanged();
    }

    private void AddToCart(vmProduct vm)
    {
        //update viewmodel
        vm.Quantity++;
        vm.HideBadge = "";

        //update the cart
        cartService.IncrementItem(vm.Product);
        StateHasChanged();
    }

    public class vmProduct
    {
        public required ProductDTO Product { get; set; }
        public int Quantity { get; set; } = 0;
        public string HideBadge { get; set; } = "visually-hidden";
        public string AddBtnText { get; set; } = "Add to cart";
    }
}
