@using TheWag.Models;
@using TheWag.Wasm.Util;
@using TheWag.Wasm.Services;

@inject CartService cartService
@inject HttpClient Http
@inject AppSettings appSettings

@page "/catalog"

<PageTitle>Catalog</PageTitle>

<h3>Catalog</h3>

@if (_vmProducts == null)
{
    <img src="images/TailLoader.gif" style="max-height:4em; max-width:4em" />
    <em>Loading...</em>
}
else
{
    <div class="container">
        <div class="row row-cols-auto">
            @foreach (var vmProduct in _vmProducts)
            {

                <div class="col">
                    <div class="card container-sm h-100">
                        <img src="@vmProduct.URL" class="card-img-top force-fit" alt="@vmProduct.Product.Description">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title, text-wrap">@vmProduct.Product.Description</h5>
                            <p class="card-text">Price: @vmProduct.Product.PriceCurrency</p>
                            <div class="mt-auto">
                                <button type="button" @onclick="(() => AddToCart(vmProduct.Product.Id))" class="btn btn-primary position-relative ">
                                    @vmProduct.addBtnText
                                    <span class="@vmProduct.hideBadge position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                        @vmProduct.Quantity In cart
                                        <span class="visually-hidden">Already in cart</span>
                                    </span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private IList<vmProduct>? _vmProducts = null;

    protected override async Task OnInitializedAsync()
    {
        var products = await Http.GetFromJsonAsync<ProductDTO[]>($"{appSettings.FunctionHostUrl}/api/GetAllProducts");

        _vmProducts = new List<vmProduct>();

        foreach (var product in products)
        {
            var qty = cartService.GetItemCount(product.Id.GetValueOrDefault());

            // //if the pic doesn't exist in storage, dont load
            // if (bcc.GetBlobClient(product.URL.Trim()).Exists())
            // {
            _vmProducts.Add(new vmProduct()
                    {
                        //check to see if the pic exits
                        Product = product,
                    URL = $"{appSettings.BlobHostUrl}/{appSettings.ContainerName}/{product.URL}",
                        Quantity = qty,
                        addBtnText = qty > 0 ? "Add another" : "Add to cart",
                        hideBadge = qty > 0 ? "" : "visually-hidden"
                    });
            // }
        }

        StateHasChanged();
    }


    private void AddToCart(int? id)
    {
        //update the vm
        var vm = _vmProducts?.FirstOrDefault(x => x.Product.Id == id);
        vm.Quantity ++;
        vm.hideBadge = "";
        vm.addBtnText = "Add another";


        //update the cart
		cartService.IncrementItem(vm.Product);
        }

    public class vmProduct
    {
        public required ProductDTO Product { get; set; }
        public required string URL { get; set; }
        public int Quantity { get; set; } = 0;
        public required string addBtnText { get; set; }
        public string hideBadge { get; set; } = "";

    }
}
